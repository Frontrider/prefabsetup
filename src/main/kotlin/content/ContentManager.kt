package io.github.cottonmc.prefabmod.content

import configuration.WorkspaceConfiguration
import io.github.cottonmc.functionapi.api.FunctionAPIIdentifier
import io.github.cottonmc.functionapi.api.content.block.BlockTemplate
import io.github.cottonmc.functionapi.blocks.templates.BlockTemplateImpl
import io.github.cottonmc.functionapi.content.StaticCommandExecutor
import io.github.cottonmc.functionapi.content.template.RegistrationTemplate
import io.github.cottonmc.functionapi.items.template.ItemMaterialTemplate
import io.github.cottonmc.functionapi.items.template.ItemTemplateImpl
import io.github.cottonmc.functionapi.util.commandbuilder.PrintDataClassAsCommands
import io.github.cottonmc.prefabmod.Application
import io.github.cottonmc.prefabmod.views.modal.content.BlockEditor
import javafx.beans.property.SimpleListProperty
import javafx.beans.property.SimpleObjectProperty
import tornadofx.*
import views.EditorWorkspace
import java.io.File

object ContentManager {

    open class Content<T>(val name:String,template: T) {
        val template = SimpleObjectProperty(template)
        val ids = SimpleListProperty<FunctionAPIIdentifier>()
    }

    val staticCommandExecutor = StaticCommandExecutor()
    init{
        staticCommandExecutor.registerDataObject(RegistrationTemplate())
        staticCommandExecutor.registerDataObject(BlockTemplateImpl())
        staticCommandExecutor.registerDataObject(ItemTemplateImpl())
        staticCommandExecutor.registerDataObject(ItemMaterialTemplate())

    }


    class BlockContent(name:String): Content<BlockTemplate>(name,BlockTemplateImpl())

    var blocks = SimpleListProperty<Content<BlockTemplate>>()

    fun save(){
        println("saving blocks")
        for (block in blocks) {
            val blockData = "#generated by mceditor\n"+PrintDataClassAsCommands.print(block.template)
            File(Application.modFolder.absolutePath+"/static_data/prefabs/block/lib/${block.name}_template.mccontent").writeText(blockData)
            var ids = "#generated by mceditor\n"
            for (id in block.ids) {
                ids += "register $id\n"
            }
            File(Application.modFolder.absolutePath+"/static_data/prefabs/block/lib/${block.name}_ids.mccontent").writeText(ids)

            File(Application.modFolder.absolutePath+"/static_data/prefabs/block/${block.name}.mccontent").writeText("""
                include ${WorkspaceConfiguration.modid.value}:block/lib/${block.name}_template.mccontent
                include ${WorkspaceConfiguration.modid.value}:block/lib/${block.name}_ids.mccontent
            """.trimIndent())
        }
    }

    fun reload(){
        save()
    }

    fun openContent(block:String){
        val file = nameToContentFile(block)
        EditorWorkspace.tabs.tab("New Block"){add(BlockEditor(block,!file.exists()).root)}
    }

    fun closeContent(block:String){

    }


    fun addBlock(template: Content<BlockTemplate>){
        if(blocks.firstOrNull { it.name == template.name } == null){
            blocks.add(template)
        }
    }


    fun getBlocks():List<String>{
        return blocks.map {
            it.name
        }
    }

    private fun nameToContentFile(name:String):File{
        return File(Application.modFolder.absolutePath+"/static_data/prefabs/block/${name}.mccontent")
    }
}